using System;
using System.Linq;
using EulerPages.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;

namespace EulerPages.Data
{
    public class DbInitializer
    {
        public static void Initialize(IServiceProvider serviceProvider)
        {
            using (var context = new ProblemContext(
                serviceProvider.GetRequiredService<DbContextOptions<ProblemContext>>()))
            {
                if (context.Problems.Any())
                {
                    return;
                }

                var problems = new Problem[]
                    {
                        new Problem
                        {
                            ProblemId = 1,
                            Answer = 233168,
                            Question =
                            @"If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

                            Find the sum of all the multiples of 3 or 5 below 1000.",
                            Title = "Multiples of 3 and 5"
                        },
                        new Problem
                        {
                            ProblemId = 2,
                            Answer = 4613732,
                            Question =
                            @"Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

                            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

                            By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.",
                            Title = "Even Fibonacci numbers"
                        },
                        new Problem
                        {
                            ProblemId = 3,
                            Answer = 6857,
                            Question =
                            @"The prime factors of 13195 are 5, 7, 13 and 29.

                            What is the largest prime factor of the number 600851475143 ?",
                            Title = "Largest prime factor"
                        }
                    };

                foreach (var p in problems)
                {
                    context.Problems.Add(p);
                }

                context.SaveChanges();

                var solutions = new Solution[]
                {
                    new Solution
                    {
                        ProblemId = 1,
                        Score = 0,
                        Text = @"
We define a function FindSumOfMultiples (FSOM) which sums the multiples of a given number x, below a given limit y.
The answer to this problem is then given by FSOM(3, 1000) + FSOM(5, 1000) - FSOM(15, 1000) 
Why do we subtract FSOM(15,1000)?
This is because we double-count the numbers which are multiples of both 3 and 15, then adjust our answer downwards by that amount.
",
                        Code = @"
public string Solve()
{
    int a = 3;
        int b = 5;
        int maxValue = 1000;
        int ans = this.FindSumOfMultiples(a, maxValue) + this.FindSumOfMultiples(b, maxValue) - this.FindSumOfMultiples(a * b, maxValue);
        return ans.ToString();
}

public int FindSumOfMultiples(int x, int maxValue)
{
    int tmp = x;
    int sum = 0;
    while (tmp < maxValue)
    {
        sum += tmp; // Add this value to sum
        tmp += x; // Go to the next multiple
    }

    return sum;
}
"
                    },
                    new Solution
                    {
                        ProblemId = 2,
                        Score = 0,
                        Text = @"
We cycle through the sequence while a <= 4 million ... incrementing the sum each time a term is even
",
                        Code = @"
public string Solve()
{
    int n = 2;
    int maxValue = 4000000;

    // Initialise Fibonacci sequence
    int a = 1;
    int b = 2;
    int sum = 2;
    int tmp = 0;
    while (a <= maxValue)
    {
        tmp = b;
        b = a + tmp;
        a = tmp;
        if ((b % n) == 0)
        {
            sum = sum + b;
        }
    }

    return sum.ToString();
}
"
                    },
                    new Solution
                    {
                        ProblemId = 3,
                        Score = 0,
                        Text = @"
We divide the large number (600851475143) by all prime factors until we reduce it to 1.
The last division is the highest prime factor.
",
                        Code = @"
public string Solve()
{
    double n = 600851475143;
        return this.HPF(n).ToString();
    }

    public int HPF(double n)
    {
        double t = n;
        double d = 2;
        while (t > 1)
        {
            if (t % d == 0)
            {
                // then d is a factor of n; we can divide by it. once t reaches 1, we will have found all factors, and last factor = d
                t = t / d;
            }
            else
            {
                d++;
            }
        }

        return (int)d; // Returns the highest prime factor of n
    }
"
                    }
                };

                foreach (var s in solutions)
                {
                    context.Solutions.Add(s);
                }

                context.SaveChanges();
            }
        }
    }
}
